(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
SetDirectory[NotebookDirectory[]];
nevents=10000;
minMDM=500.(*minimum DM mass to scan over in GeV*);
maxMDM=10.^6(*Maximum DM mass for scan in GeV*);
MDMpoints=5(*How many points along MDM to scan*);
DPmass=5.(*Dark Photon mass in GeV*);
(*specpoints=30.(*How many points along the boosted spectrum to generate*);*)

aucm=1.49598 10^11 *100;(*distance from earth to sun in cm*)
hawcbins={{0.5,1.6,2.2 10^-12},{1.6,5.0,8.8 10^-13},{5.0,15.7,2.8 10^-13},{15.7,50,8.1 10^-14},{50,158,6.3 10^-14}};(*Start of bin (left edge) and flux limit in TeV and TeV cm^2s^-1 respectively*)

(*These are parameters to be used in the MG5 scan -- they mostly don't matter for the model independent case*)
MG\[Epsilon]=1.;(*Mixing parameter between photon and dark photon -- doesn't really matter for the model independent scan here*)
MG\[Alpha]\[Chi]=2.4 10^-2;(*Dark fine structure constant -- also doesn't matter here*)
MGm\[Chi]=DPmass;(*DM mass -- only need it big enough to avoid the DP decaying into them*)

(*fixedform is what makes the numbers nice to print to a file*)
StringPadLeft["",1];(*this must be evaluated first for no evident reason*)fixedform[numd_,data_]:=Module[{ef},ef[s_String/;StringTake[s,1]=="-"]:="-"<>StringPadLeft[StringTake[s,{2,-1}],2,"0"];
ef[s_String]:="+"<>StringPadLeft[s,2,"0"];
NumberForm[data,{numd,numd},ExponentFunction->(#&),NumberSigns->{"-"," "},NumberFormat:>(Row[{StringPadRight[#1,numd+2,"0"],"E",ef[#3]}]&)]]
$mg5outputfile = "dvb";
$inputfile="anninput";
$mg5runfile="mg5run";
$pythiaoutputfile="pythiaoutput";
$pythonoutputfile="pythonoutput";
$resultsfile="spec"<>ToString[$KernelID];
$debugfile = "debug"<>$mg5outputfile;
talpha="thermal";
(*au=1.49598 10^11 *100;(*distance from earth to sun in cm*)
aum=1.49598 10^11 ;(*distance from earth to sun in m*)
SR=6.957 10^8;(*Solar radius in m*)*)
If[FileExistsQ[$debugfile],DeleteFile[$debugfile]];


(* ::Input::Initialization:: *)
If[FileExistsQ["pythia8_card_"<>$mg5outputfile<>".dat"],DeleteFile["pythia8_card_"<>$mg5outputfile<>".dat"]];
CopyFile["pythia8_card_default.dat","pythia8_card_"<>$mg5outputfile<>".dat"];
pythiacard=OpenAppend["pythia8_card_"<>$mg5outputfile<>".dat",PageWidth-> 500];
WriteString[pythiacard,"ResonanceWidths:minWidth = 1e-30"];
WriteString[pythiacard,"\n"<>"Check:event = off"];
(*WriteString[pythiacard,"\n"<>"50:onMode = on"];*)
(*WriteString[pythiacard,"\n"<>"100001:offIfMatch = 1 1"];*)

(*WriteString[pythiacard,"\n"<>"100001:oneChannel = onMode 1. 0. 11 -11"];*)

(*WriteString[pythiacard,"\n"<>"ParticleDecays:allowPhotonRadiation = on"];*)
(*This enables particles with very small widths to still decay by avoiding their width being set to zero for being below the default min of 1e-20*)
(*WriteString[pythiacard,"\n"<>"ParticleDecays:limitTau0 = off"];
WriteString[pythiacard,"\n"<>"ParticleDecays:limitTau = off"];
WriteString[pythiacard,"\n"<>"ParticleDecays:limitRadius = off"];
WriteString[pythiacard,"\n"<>"ParticleDecays:limitCylinder = off"];
WriteString[pythiacard,"\n"<>"ParticleDecays:mSafety = 0."];*)
Close[pythiacard];


(* ::Input::Initialization:: *)
(*This sets up the scan to annihilate electron/positron into dark photons AT REST*)
ScanMadgraph[]:=(
If[FileExistsQ[$mg5runfile],DeleteFile[$mg5runfile]];
If[DirectoryQ[$mg5outputfile],DeleteDirectory[$mg5outputfile,DeleteContents->True]];
mg5run={"import model ./SMDP_UFO/",
 "set automatic_html_opening False",
 "generate e+ e- > dvb dvb",
"output " <> $mg5outputfile,
"launch "<>$mg5outputfile,
"shower = Pythia8",
"set nevents "<>ToString[nevents],
"set WDVB Auto",
"set ptj 0.0",
"set pta 0.0",
"set ptl 0.0",
(*"set drll 0.0",
"set drjj 0.0",
"set draj 0.0",
"set drjl 0.0",
"set dral 0.0",
"set draa 0.0",
"set r0gamma 0.01",*)
"set etaj -1.0",
"set etaa -1.0",
"set etal -1.0",
"./pythia8_card_"<>$mg5outputfile<>".dat",
"set mxd "<>ToString[fixedform[6,MGm\[Chi]]],
"set gsm "<>ToString[fixedform[6,MG\[Epsilon]]],
"set adm "<>ToString[fixedform[6,MG\[Alpha]\[Chi]]],
"set mdvb "<>ToString[fixedform[6,DPmass]],
"set ebeam1 "<>ToString[fixedform[6,DPmass*1.00001]],(*Need to have .00001 extra to avoid computational issues*)
"set ebeam2 "<>ToString[fixedform[6,DPmass*1.00001]],
"set WDVB Auto"};
Export[$mg5runfile,mg5run,"text"];
Run["mg5_aMC "<>$mg5runfile];)


(* ::Input::Initialization:: *)
pythiaread[]:=
(fn=FileNames[All,$mg5outputfile<>"/Events"];
If[FileExistsQ[$pythiaoutputfile],DeleteFile[$pythiaoutputfile]];
Run["gzip -d < "<>fn<>"/tag_1_pythia8_events.hepmc.gz > ./"<>$pythiaoutputfile];
If[FileExistsQ[$pythonoutputfile],DeleteFile[$pythonoutputfile]];
Run["python readspec.py "<>$pythiaoutputfile<>" "<>$pythonoutputfile];
photonErest=Flatten[Import[$pythonoutputfile,"TSV"]];)


(* ::Input::Initialization:: *)
(*RUN MG5 AND PYTHIA TO GET SPECTRUM*)
ScanMadgraph[];
pythiaread[];


(* ::Input::Initialization:: *)
(*BOOSTING*)
dNdx1[E1_,m\[Chi]_,mA_]:=((*E1 will be the energy in the boosted frame, i.e. the galactic frame. See 1503.01773 pg. 16*)
x1=E1/m\[Chi];(*No 2 here as we are boosting, but not decaying into two products*)
\[Epsilon]1=2 mA/m\[Chi];
t1max=Min[1,(2x1)/\[Epsilon]1^2 (1+Sqrt[1-\[Epsilon]1^2])];
t1min=(2x1)/\[Epsilon]1^2 (1-Sqrt[1-\[Epsilon]1^2]);
tabint=Select[photonErest,mA/2 t1max>#>mA/2 t1min&];
tabint=1/nevents Table[1/(2tabint[[i]]/mA),{i,1,Length[tabint]}];
Sum[tabint[[i]],{i,1,Length[tabint]}]
)


(* ::Input::Initialization:: *)
(*Now build a table of boosted points along the spectrum*)
(*spectab=Table[{10^lEn,(10^lEn)^2dNdx1[10^lEn,100.,5. 10^-3]},{lEn,Log10[0.5],Log10[100.],(Log10[100.]-Log10[0.5])/(specpoints-1)}]*)
hawcbins={{0.5,1.6,2.2 10^-12},{1.6,5.0,8.8 10^-13},{5.0,15.7,2.8 10^-13},{15.7,50.,8.1 10^-14},{50.,158.,6.3 10^-14}};
ben=Table[i,{i,1,Length[hawcbins]}](*Just initializing a table to be overwritten*);
Do[ben[[i]]={hawcbins[[i,1]],10^((Log10[hawcbins[[i,1]]]+Log10[hawcbins[[i,2]]])/2),hawcbins[[i,2]]},{i,1,Length[hawcbins]}](*Creates a table "ben" of all the energies to be sampled on the spectrum in TeV*)
ben=ben//Flatten;
ben=DeleteDuplicates[ben];

spectab[m\[Chi]_,mA_]:=Table[{ben[[i]],ben[[i]]^2 dNdx1[ben[[i]],m\[Chi],mA]},{i,1,Length[ben]}];(*This gives the boosted spectrum E^2 dN/dE in the galactic rest frame,per annihilation*)


(* ::Input::Initialization:: *)
(*BUILD BOOSTED SPECTRUM SCAN ALONG MDM -- EVERYTHING IN TEV FROM HERE*)
If[FileExistsQ[$resultsfile],DeleteFile[$resultsfile]];
mdm=Table[0.001*10^lm\[Chi],{lm\[Chi],Log10[minMDM],Log10[maxMDM],(Log10[maxMDM]-Log10[minMDM])/(MDMpoints-1)}](*Generates a table of DM masses in TeV distributed uniformly in log space to be scanned over*);
Do[
outlist={mdm[[i]],0.001*DPmass,spectab[mdm[[i]],0.001*DPmass]};
results=OpenAppend[$resultsfile,PageWidth-> 500];
Write[results,outlist];
Close[results];
,{i,1,MDMpoints}]



(* ::Input::Initialization:: *)
SetDirectory[Directory[]];

build=0;(*build will have to be set to 1 if first time running, to generate interpolation tables*)

k=2.5; (*See 1602.01465 Eq. 15/16 for what these constants are*)
u0 = 245 10^3; 
uS=233 10^3;
vgal = 550 10^3;(*Galactic escape velocity*)
SR=6.957 10^8;(*Solar radius*)
\[Rho]\[Chi]=0.3 10^6(*Local dark matter density; PDG says 0.3 GeV/c^2 per cm^-3 = 10^6*0.3 GeV/c^2 per m^-3 *);
Gconst=6.67408 10^-11;
mp=0.938272(*proton mass, GeV*);
SSM=Import["data/SSM.dat"];
(*The lighter elements seem to have density as a function of radius, so I pulled these functions from *)
(*NB These appear to be mass fractions, not fraction by number. If the second entry is divided by the mass number then it will be fraction by number.*)
Hab=Table[{SSM[[i,2]]*SR,SSM[[i,7]]},{i,2,Length[SSM]}];
He4ab=Table[{SSM[[i,2]]*SR,SSM[[i,8]](*/4*)},{i,2,Length[SSM]}];
He3ab=Table[{SSM[[i,2]]*SR,SSM[[i,9]](*/3*)},{i,2,Length[SSM]}];
C12ab=Table[{SSM[[i,2]]*SR,SSM[[i,10]](*/12*)},{i,2,Length[SSM]}];
N14ab=Table[{SSM[[i,2]]*SR,SSM[[i,11]](*/14*)},{i,2,Length[SSM]}];
O16ab=Table[{SSM[[i,2]]*SR,SSM[[i,12]](*/16*)},{i,2,Length[SSM]}];
Habf=Interpolation[Hab];
He4abf=Interpolation[He4ab];
He3abf=Interpolation[He3ab];
C12abf=Interpolation[C12ab];
N14abf=Interpolation[N14ab];
O16abf=Interpolation[O16ab];

(*Solar mass density importing data*)
SMD=Import["data/SolarMassDensity.csv"](*//ToExpression*)(*r/Subscript[R, \[CircleDot]], kg/m^3*);
SMDtab=Table[{SMD[[i,1]]*SR,SMD[[i,2]]},{i,1,Length[SMD]}];
SMDi=Interpolation[SMDtab,InterpolationOrder->1];
SM=NIntegrate[SMDi[x]4\[Pi] x^2,{x,0,SR}];
(*Htnf is the total fraction by number of hydrogen in the sun*)
Htnf=0.912;
(*Htmf is the total fraction by mass of hydrogen in the sun*)
Htmf=0.710;
(*Total number of atoms in the sun*)
tn=(Htmf*SM)/(1.007825 au Htnf)/.{au->1.660539 10^-27(*kg*)};

(*The function ndtf takes the astrophysical parameter log\[Epsilon]X for a particular element in the sun and outputs the total number density fraction of the sun (e.g. what fraction of the sun is that element by number). The values are taken from 1405.0279 and 1405.0287*)
tnf[log\[Epsilon]X_]:=10^log\[Epsilon]X/10^12 Htnd;
log\[Epsilon]={(*Mg*) 7.59, (*Si*) 7.51, (*P*) 5.41, (*S*) 7.12, (*K*) 5.04, (*Ca*) 6.32, (*Sc*) 3.16, (*Ti*) 4.93, (*V*) 3.89, (*Cr*) 5.62, (*Mn*) 5.42, (*Fe*) 7.47, (*Co*) 4.93, (*Ni*) 6.20};
(*Table of constant number densities for heavier atoms, number/m^3*)
ndtab=Table[tnf[log\[Epsilon][[i]]],{i,1,Length[log\[Epsilon]]}]*tn/(4/3 \[Pi] SR^3);

(*These are number densities of atoms, number/m^3, radius dependent*)
Hnd[x_]:=SMDi[x]Habf[x]/Hmass/.{Hmass-> 1.007825 au}/.{au->1.660539 10^-27(*kg*)}
He4nd[x_]:=SMDi[x]He4abf[x]/Hmass/.{Hmass-> 4.002602 au}/.{au->1.660539 10^-27(*kg*)}
He3nd[x_]:=SMDi[x]He3abf[x]/Hmass/.{Hmass-> 3.0160293 au}/.{au->1.660539 10^-27(*kg*)}
C12nd[x_]:=SMDi[x]C12abf[x]/Hmass/.{Hmass-> 12 au}/.{au->1.660539 10^-27(*kg*)}
N14nd[x_]:=SMDi[x]N14abf[x]/Hmass/.{Hmass-> 14.003074 au}/.{au->1.660539 10^-27(*kg*)}
O16nd[x_]:=SMDi[x]O16abf[x]/Hmass/.{Hmass-> 15.994915 au}/.{au->1.660539 10^-27(*kg*)}
nd[y_,i_]:=Join[{Hold[Hnd[x]],Hold[He4nd[x]],Hold[He3nd[x]],Hold[C12nd[x]],Hold[N14nd[x]],Hold[O16nd[x]]},ndtab][[i]]/.{x-> y}//ReleaseHold;
(*These lists are for:
{1 H1, 2 He4, 3 He3, 4 C12, 5 N14, 6 O16, 7 Mg, 8 Si, 9 P, 10 S, 11 K, 12 Ca, 13 Sc, 14 Ti, 15 V, 16 Cr, 17 Mn, 18 Fe, 19 Co, 20 Ni}*)
ZN:={1,2,2,6,7,8,12,14,15,16,19,20,21,22,23,24,25,26,27,28};
mN:={1.007825 ,4.002602,3.0160293,12,14.003074,15.994915,24.305, 28.085,30.974,32.06,39.098,40.078,44.956,47.867,50.942,51.996,54.938,55.845,58.933,58.693}au/.{au-> 0.9314941 (*GeV*)};
AN:={1,4,3,12,14,16,24,28,31,32,39,40,45,48,51,52,55,56,59,59};
(*LogLogPlot[{Hnd[r],He4nd[r],He3nd[r],C12nd[r],N14nd[r],O16nd[r],Mgnd[r],Sind[r]},{r,0,SR}]*)
(*LogPlot[vei[x SR],{x,0,1},Frame\[Rule] True,FrameStyle\[Rule] Black,LabelStyle\[Rule] 10,FrameLabel\[Rule] {"r/Subscript[R, \[CircleDot]]","Escape Velocity (m/s)"},PlotRange\[Rule] {{0,1},All}]*)
(*LogLogPlot[O16nd[x],{x,0,SR}]*)



(* ::Input::Initialization:: *)
If[build==1,
Mtab=Table[{r,NIntegrate[SMDi[rp]4\[Pi] rp^2,{rp,0,r}]},{r,0,SR,SR/100.}];
Mi=Interpolation[Mtab,InterpolationOrder->1];
Export["data/Mass.csv",Mtab,"CSV"];
vetab= Table[{r,\[Sqrt](-2(NIntegrate[(Gconst Mi[rp])/rp^2,{rp,SR,r}]-(Gconst Mi[SR])/SR))},{r,SR/100,SR,SR/100}];
vetab=Prepend[vetab,{0.0001,\[Sqrt](-2(NIntegrate[(Gconst Mi[rp])/rp^2,{rp,SR,0.001}]-(Gconst Mi[SR])/SR))}];
Export["data/Escape.csv",vetab,"CSV"];]


(* ::Input::Initialization:: *)
If[build==1,
fnonorm[u_]:=(*norm*) (Exp[(vgal^2-u^2)/(k u0^2)]-1)^k HeavisideTheta[vgal-u];
(*normconstant=1/NIntegrate[fnonorm[Sqrt[x^2+y^2+z^2]],{x,0,vgal},{y,0,vgal},{z,0,vgal}]*)
normconstant=1/NIntegrate[4\[Pi] u^2 fnonorm[u],{u,0,vgal}];

f[u_]:=normconstant (Exp[(vgal^2-u^2)/(k u0^2)]-1)^k HeavisideTheta[vgal-u];
usolve=Solve[u^2+uS^2+2u uS c==vgal^2,u][[2]];
upint=u/.usolve/.{c->-1};
Export["data/upint.csv",upint,"CSV"];
fS[u_] := 1/2 NIntegrate[f[Sqrt[u^2+uS^2+2u uS c]],{c,-1,1}]
ftab=Table[{u,f[u]},{u,0.,upint,upint/1000}];
Export["data/f.csv",ftab,"CSV"];
fStab=Table[{u,fS[u]},{u,0.,upint,upint/1000}];
Export["data/fS.csv",fStab,"CSV"];]


(* ::Input::Initialization:: *)
If[build==1,
fStab=Import["data/fS.csv"]//ToExpression;
fSi=Interpolation[fStab];
vetab=Import["data/Escape.csv"]//ToExpression;
vei=Interpolation[vetab,InterpolationOrder->1];
nint1=NIntegrate[4\[Pi] u(u^2)fSi[u],{u,0,upint}];
Export["data/nint1.csv",nint1,"CSV"];
nint2=NIntegrate[4\[Pi] u fSi[u],{u,0,upint}];
Export["data/nint2.csv",nint2,"CSV"];
wint[r_]:=nint1+vei[r]^2 nint2;
wrint=NIntegrate[4 \[Pi] r^2 O16nd[r]wint[r],{r,0,SR}];
Export["data/wrint.csv",wrint,"CSV"];]


(* ::Input::Initialization:: *)
If[build==1,
Ea[z_]:=-NIntegrate[Exp[-t]/t,{t,-z,\[Infinity]}];
Etab=Table[{-Exp[lnz],Ea[-Exp[lnz]]},{lnz,-10,10,0.1}];
Export["data/Ei.csv",Etab,"CSV"];]


(* ::Input::Initialization:: *)
vetab=Import["data/Escape.csv"]//ToExpression;
vei=Interpolation[vetab,InterpolationOrder->1];
fStab=Import["data/fS.csv"]//ToExpression;
fSi=Interpolation[fStab];
ftab=Import["data/f.csv"]//ToExpression;
fi=Interpolation[ftab];
nint1=Import["data/nint1.csv"][[1,1]]//ToExpression;
nint2=Import["data/nint2.csv"][[1,1]]//ToExpression;
wrint=Import["data/wrint.csv"][[1,1]]//ToExpression;
upint=Import["data/upint.csv"][[1,1]]//ToExpression;
Etab=Import["data/Ei.csv"]//ToExpression;
Ei=Interpolation[Etab];
Mtab=Import["data/Mass.csv"]//ToExpression;
Mi=Interpolation[Mtab];
Emax[r_,u_,m\[Chi]_,mn_]:=(*1./GeV*)(*Desired units of GeV*)(2 (\[Mu]N^2)(*GeV^2/c^4*)( u^2+vei[r]^2)(*m^2/s^2*))/mn (*GeV/c^2*)  1/c^2/.{\[Mu]N-> (m\[Chi] mn)/(m\[Chi]+mn),c->3 10^8};
(*AbsoluteTiming[Emax[tr,tu,tm\[Chi],tmN]]*)
Emin[r_,u_,m\[Chi]_,mn_]:=(*1./GeV*)(*Desired units of GeV*)1/2 m\[Chi] 1(*GeV*)/c^2 u^2  (*m^2/s^2*)/.{c-> 3 10^8(*m/s*)};
(*AbsoluteTiming[Emin[tr,tu,tm\[Chi],tmN]]*)

(*This finds an upper limit on u based on the heaviside theta*)
(*Solve[Emax[0,u,m\[Chi],Nt]-Emin[0,u,m\[Chi],Nt]\[Equal]0,u]*)
(*/.{m\[Chi]\[Rule] inm\[Chi],Nt\[Rule] mNt}*)
upintHS[m\[Chi]_,mNu_]:=((0.` +8.439776214093713`*^6 ) Sqrt[m\[Chi]] Sqrt[mNu])/((m\[Chi]+mNu) Sqrt[9.`- (36.` m\[Chi] mNu)/(m\[Chi]+mNu)^2]);

EN[An_]:=(*1/GeV*)(*Desired units of GeV*)0.114/An^(5/3) (*GeV*);
(*t\[Sigma]SI = 7.542 10^-5 pb /.{pb\[Rule] 10^-36 cm^2};
t\[Sigma]SD = 0;
\[CapitalGamma]cap=1/s5.9 10^22 ((100 GeV)/(tm\[Chi] GeV))^2((270 km/s)/(u0 m/s))^3(t\[Sigma]SI 1200)/(10^-40cm^2)/.{km\[Rule]1000m};*)
(*tu=1/2.vgal;
tm\[Chi]=1000.;
tmN=1;
tAN=1;
tmA=0.5;
tr=1 10^6;
t\[Epsilon]=10^-8;
t\[Alpha]\[Chi]=0.035 tm\[Chi]/1000;*)
integrandr[r_,i_]:=4\[Pi] r^2 nd[r,i];
integrandu[r_,u_]:=4\[Pi] u(u^2+vei[r]^2)fSi[u];
(*d\[Sigma]dE[r_,u_,m\[Chi]_,mA_,\[Epsilon]_,\[Alpha]\[Chi]_,ER_,mn_,Zn_,En_]:= 8 \[Pi] \[Epsilon]^2 \[Alpha]\[Chi] \[Alpha] Zn^2 mn /((u^2+vei[r]^2)(2mn ER +mA^2)^2)Exp[-ER/En]\[HBar]^2c^4/.{\[Alpha]\[Rule] 1/137.}/.{\[HBar]\[Rule] 6.582119 10^-22 0.001 }/.{c\[Rule] 3 10^8};

EDDmax[u_,m\[Chi]_,mn_]:=(*1./GeV*)(*Desired units of GeV*)(2 (\[Mu]N^2)(*GeV^2/c^4*)( u^2)(*m^2/s^2*))/mn (*GeV/c^2*) 1/c^2/.{\[Mu]N\[Rule] (m\[Chi] mn)/(m\[Chi]+mn),c\[Rule]2.99792458 10^8};
d\[Sigma]DDdE[u_,m\[Chi]_,mA_,\[Epsilon]_,\[Alpha]\[Chi]_,ER_,mn_,Zn_,En_]:= 8 \[Pi] \[Epsilon]^2 \[Alpha]\[Chi] \[Alpha] Zn^2 mn /((u^2)(2mn ER +mA^2)^2)Exp[-ER/En]\[HBar]^2c^4/.{\[Alpha]\[Rule] 1/137.}/.{\[HBar]\[Rule] 6.582119 10^-22 0.001 }/.{c\[Rule] 2.99792458 10^8};
integranduDD[u_]:=4\[Pi] (u^2)fSi[u];
\[Sigma]DD[m\[Chi]_,mA_,\[Epsilon]_,\[Alpha]\[Chi]_,mN_,ZN_,EN_]:=NIntegrate[
d\[Sigma]DDdE[u,m\[Chi],mA,\[Epsilon],\[Alpha]\[Chi],ER,mN,ZN,EN]integranduDD[u],{u,0,(*upint*)10upintHS[m\[Chi],mN]},
{ER,0,EDDmax[u,m\[Chi],mN]},WorkingPrecision\[Rule]4,Method\[Rule] {Automatic,"SymbolicProcessing"\[Rule]0}]/.{n\[Chi]\[Rule] \[Rho]\[Chi]/m\[Chi]}*)
\[CapitalDelta]max[r_,u_,m\[Chi]_,mi_]:=(4 mi m\[Chi])/(m\[Chi] + mi)^2;
\[CapitalDelta]min[r_,u_,m\[Chi]_,mi_]:=u^2/(u^2+vei[r]^2);
Pri[r_,u_,m\[Chi]_,mi_]:=Max[0,(\[CapitalDelta]max[r,u,m\[Chi],mi]-\[CapitalDelta]min[r,u,m\[Chi],mi])/\[CapitalDelta]max[r,u,m\[Chi],mi]];
\[Sigma]i[m\[Chi]_,i_,\[Sigma]SI_,\[Sigma]SD_,mi_,A_]:=If[i==1,\[Sigma]SI+\[Sigma]SD,((A^2) \[Sigma]SI ((mi/mp)^2) ((mp+m\[Chi])^2) )/(mi+m\[Chi])^2(*+(((A^2)\[Sigma]SD ((mp+m\[Chi])^2) )/(mi+m\[Chi])^2)*)](*m^2*);
CNcap[m\[Chi]_,i_,\[Sigma]SI_,\[Sigma]SD_]:=n\[Chi] Block[ {mNt,ZNt,ANt,ENt},
mNt=mN[[i]];
ZNt=ZN[[i]];
ANt=AN[[i]];
ENt=EN[ANt];
\[Sigma]i[m\[Chi],i,\[Sigma]SI,\[Sigma]SD,mNt,ANt] NIntegrate[
integrandr[r,i]integrandu[r,u]Pri[r,u,m\[Chi],mNt],
{r,0,SR},{u,0,(*upint*)2upintHS[m\[Chi],mNt]},WorkingPrecision->4,Method-> {Automatic,"SymbolicProcessing"->0}]]/.{n\[Chi]-> \[Rho]\[Chi]/m\[Chi]};

(*AbsoluteTiming[CNcap[tm\[Chi],tmA,t\[Epsilon],t\[Alpha]\[Chi],1]]*)
CTcap[m\[Chi]_,\[Sigma]SI_,\[Sigma]SD_]:=Sum[CNcap[m\[Chi],i,\[Sigma]SI,\[Sigma]SD],{i,1,Length[ZN]}];
(*AbsoluteTiming[CTcap[tm\[Chi],tmA,t\[Epsilon],t\[Alpha]\[Chi]]]*)
(*AbsoluteTiming[CNcap[tm\[Chi],tmA,t\[Epsilon],t\[Alpha]\[Chi],6]]*)
(*\[Sigma]vB[m\[Chi]_,mA_,\[Alpha]\[Chi]_]:=(\[Pi] \[Alpha]\[Chi]^2)/m\[Chi]^2(1-mA^2/m\[Chi]^2)^(3/2)/(1-mA^2/(2m\[Chi]^2))^2\[HBar]^2c^3/.{\[HBar]\[Rule] 6.582119 10^-22 0.001}/.{c\[Rule] 3 10^8};
(*\[Sigma]vB[tm\[Chi],tmA,t\[Alpha]\[Chi]]*)
SE[m\[Chi]_,mA_,\[Alpha]\[Chi]_,v_]:=\[Pi]/aSinh[2\[Pi] a c]/(Cosh[2 \[Pi] a c] - Cos[2\[Pi] Sqrt[c - a^2c^2]])(*(\[Pi] \[Alpha]\[Chi]/v)/(1-Exp[-\[Pi] \[Alpha]\[Chi]/v])*)/.{a\[Rule] v/(2\[Alpha]\[Chi]),c\[Rule] (6 \[Alpha]\[Chi] m\[Chi])/(\[Pi]^2mA)};
SEav[m\[Chi]_,mA_,\[Alpha]\[Chi]_]:=1/(2\[Pi] (5.1 10^-5Sqrt[1000./m\[Chi]])^2)^(3/2)NIntegrate[4\[Pi] v^2Exp[-1/2v^2/(5.1 10^-5Sqrt[1000./m\[Chi]])^2] SE[m\[Chi],mA,\[Alpha]\[Chi],v],{v,0,0.005},WorkingPrecision\[Rule] 5,Method\[Rule] {Automatic,"SymbolicProcessing"\[Rule]0}]
\[Sigma]v[m\[Chi]_,mA_,\[Alpha]\[Chi]_]:=SEav[m\[Chi],mA,\[Alpha]\[Chi]] \[Sigma]vB[m\[Chi],mA,\[Alpha]\[Chi]]
GN=6.67408 10^-11 (*m^3/(kg s^2)*);
\[Rho]S=151  10^-3 10^6(*kg/m^3*);
TS=15.5 10^6 (*kelvin*);
\[Tau]S=(*1/s*)4.5 Gyr/.{Gyr\[Rule] 10^9yr}/.{yr\[Rule] 365*24*60*60 (*s*)};
(*\[Sigma]vB[tm\[Chi],tmA,t\[Alpha]\[Chi]] m^3/s/.{m\[Rule] 10^2cm}*)
Cann[m\[Chi]_,mA_,\[Alpha]\[Chi]_]:=\[Sigma]v[m\[Chi],mA,\[Alpha]\[Chi]] ((GN m\[Chi] \[Rho]S)/(3 TS)1/kB)^(3/2)1/c^3/.{c\[Rule] 3 10^8}/.{kB\[Rule] 8.61733 10^-5  (10^-9) (*GeV*)/1(*kelvin*)}(*/.{GeV\[Rule] 1,s\[Rule] 1}*)
(*Cann[tm\[Chi],tmA,t\[Alpha]\[Chi]]*)
\[Tau][m\[Chi]_,mA_,\[Epsilon]_,\[Alpha]\[Chi]_]:=1/Sqrt[CTcap[m\[Chi],mA,\[Epsilon],\[Alpha]\[Chi]]Cann[m\[Chi],mA,\[Alpha]\[Chi]]]
\[Tau]rat[m\[Chi]_,mA_,\[Epsilon]_,\[Alpha]\[Chi]_]:=\[Tau][m\[Chi],mA,\[Epsilon],\[Alpha]\[Chi]]/\[Tau]S
N\[Chi][m\[Chi]_,mA_,\[Epsilon]_,\[Alpha]\[Chi]_]:=Sqrt[CTcap[m\[Chi],mA,\[Epsilon],\[Alpha]\[Chi]]/Cann[m\[Chi],mA,\[Alpha]\[Chi]]]Tanh[\[Tau]S/\[Tau][m\[Chi],mA,\[Epsilon],\[Alpha]\[Chi]]]*)
\[CapitalGamma]ann [m\[Chi]_,\[Sigma]SI_,\[Sigma]SD_]:= 1/2 CTcap[m\[Chi],\[Sigma]SI,\[Sigma]SD](*Tanh[\[Tau]S/\[Tau][m\[Chi],mA,\[Epsilon],\[Alpha]\[Chi]]]^2*)
(*EDDmax[u_,m\[Chi]_,mn_]:=(*1./GeV*)(*Desired units of GeV*)(2 (\[Mu]N^2)(*GeV^2/c^4*)( u^2)(*m^2/s^2*))/mn (*GeV/c^2*) 1/c^2/.{\[Mu]N\[Rule] (m\[Chi] mn)/(m\[Chi]+mn),c\[Rule]2.99792458 10^8};
d\[Sigma]DDdE[u_,m\[Chi]_,mA_,\[Epsilon]_,\[Alpha]\[Chi]_,ER_,mn_,Zn_,En_]:= 8 \[Pi] \[Epsilon]^2 \[Alpha]\[Chi] \[Alpha] Zn^2 mn /((u^2)(2mn ER +mA^2)^2)Exp[-ER/En]\[HBar]^2c^4/.{\[Alpha]\[Rule] 1/137.}/.{\[HBar]\[Rule] 6.582119 10^-22 0.001 }/.{c\[Rule] 2.99792458 10^8};
integranduDD[u_]:=4\[Pi] (u^2)fSi[u];
\[Sigma]DD[m\[Chi]_,mA_,\[Epsilon]_,\[Alpha]\[Chi]_,mN_,ZN_,EN_]:=NIntegrate[
d\[Sigma]DDdE[u,m\[Chi],mA,\[Epsilon],\[Alpha]\[Chi],ER,mN,ZN,EN]integranduDD[u],{u,0,(*upint*)10upintHS[m\[Chi],mN]},
{ER,0,EDDmax[u,m\[Chi],mN]},WorkingPrecision\[Rule]4,Method\[Rule] {Automatic,"SymbolicProcessing"\[Rule]0}]/.{n\[Chi]\[Rule] \[Rho]\[Chi]/m\[Chi]}*)
(*out\[Sigma]=\[Sigma]DD[inm\[Chi],inmA,inep,in\[Alpha]\[Chi],mp,1.,EN[1.]]10^4(*in cm^2*)(*m^2(1 pb)/(10^-40m^2)*);*)
(*out\[CapitalGamma]ann = \[CapitalGamma]ann[inm\[Chi],in\[Sigma]SI,in\[Sigma]SD]*)
(*out\[Tau]rat=\[Tau]rat[inm\[Chi],inmA,inep,in\[Alpha]\[Chi]];*)
(*Export["ann",\[CapitalGamma]ann,"Table"];*)
(*CTcap[1000.,10^-47,0.]*)




(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
If[build==1,
Mtab=Table[{SSM[[i,2]],SSM[[i,1]]},{i,2,Length[SSM]}];
Mi=Interpolation[Mtab,InterpolationOrder->1];
Export["data/Mass.csv",Mtab,"CSV"];
vetab= Table[{r,\[Sqrt](-2(NIntegrate[(Gconst Mi[rp])/rp^2,{rp,SR,r}]-(Gconst Mi[SR])/SR))},{r,SR/100,SR,SR/100}];
vetab=Prepend[vetab,{0.0001,\[Sqrt](-2(NIntegrate[(Gconst Mi[rp])/rp^2,{rp,SR,0.001}]-(Gconst Mi[SR])/SR))}];
Export["data/Escape.csv",vetab,"CSV"];]


(* ::Input::Initialization:: *)
If[build==1,
fnonorm[u_]:=(*norm*) (Exp[(vgal^2-u^2)/(k u0^2)]-1)^k HeavisideTheta[vgal-u];
(*normconstant=1/NIntegrate[fnonorm[Sqrt[x^2+y^2+z^2]],{x,0,vgal},{y,0,vgal},{z,0,vgal}]*)
normconstant=1/NIntegrate[4\[Pi] u^2 fnonorm[u],{u,0,vgal}];

f[u_]:=normconstant (Exp[(vgal^2-u^2)/(k u0^2)]-1)^k HeavisideTheta[vgal-u];
usolve=Solve[u^2+uS^2+2u uS c==vgal^2,u][[2]];
upint=u/.usolve/.{c->-1};
Export["data/upint.csv",upint,"CSV"];
fS[u_] := 1/2 NIntegrate[f[Sqrt[u^2+uS^2+2u uS c]],{c,-1,1}];
ftab=Table[{u,f[u]},{u,0.,upint,upint/1000}];
Export["data/f.csv",ftab,"CSV"];
fStab=Table[{u,fS[u]},{u,0.,upint,upint/1000}];
Export["data/fS.csv",fStab,"CSV"];]


(* ::Input::Initialization:: *)
If[build==1,
fStab=Import["data/fS.csv"]//ToExpression;
fSi=Interpolation[fStab];
vetab=Import["data/Escape.csv"]//ToExpression;
vei=Interpolation[vetab,InterpolationOrder->1];
nint1=NIntegrate[4\[Pi] u(u^2)fSi[u],{u,0,upint}];
Export["data/nint1.csv",nint1,"CSV"];
nint2=NIntegrate[4\[Pi] u fSi[u],{u,0,upint}];
Export["data/nint2.csv",nint2,"CSV"];
wint[r_]:=nint1+vei[r]^2 nint2;
wrint=NIntegrate[4 \[Pi] r^2 O16nd[r]wint[r],{r,0,SR}];
Export["data/wrint.csv",wrint,"CSV"];]


(* ::Input::Initialization:: *)
If[build==1,
Ea[z_]:=-NIntegrate[Exp[-t]/t,{t,-z,\[Infinity]}];
Etab=Table[{-Exp[lnz],Ea[-Exp[lnz]]},{lnz,-10,10,0.1}];
Export["data/Ei.csv",Etab,"CSV"];]




(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
build=0;
SetDirectory[NotebookDirectory[]];
SSM=Import["data/agss09.dat"];
k=2.5; (*See 1602.01465 Eq. 15/16 for what these constants are*)
u0 = 245 10^3; 
uS=233 10^3;
vgal = 550 10^3;(*Galactic escape velocity in m/s*)
SR=6.9598 10^8;(*Solar radius in m*)
\[Rho]\[Chi]=0.3 10^6(*Local dark matter density; PDG says 0.3 GeV/c^2 per cm^-3 = 10^6*0.3 GeV/c^2 per m^-3 *);
Gconst=6.67408 10^-11;
mp=0.938272(*proton mass, GeV*);
SM=1.989 10^30(*Solar mass in kg*);
(*Htnf is the total fraction by number of hydrogen in the sun*)
Htnf=0.912;
(*Htmf is the total fraction by mass of hydrogen in the sun*)
Htmf=0.710;
(*Total number of atoms in the sun*)
tn=(Htmf*SM)/(1.007825 au Htnf)/.{au->1.660539 10^-27(*kg*)};

(*THIS IS ELEMENTS USED IN FENG*)
atomscut={"He4","N14","O16","Ne","Mg","Si","S","Fe"};

atomscut={"H1","He4","N14","O16","Ne","Mg","Si","S","Fe"};


Fiinf={{"He4",0.986},{"N14",0.613},{"O16",0.613},{"Mg",0.281},{"Si",0.281},{"Fe",0.00677}};
mic={{"He4",18.2},{"N14",75.2},{"O16",75.2},{"Mg",71.7},{"Si",71.7},{"Fe",29.3}};
\[Alpha]i={{"He4",1.58},{"N14",2.69},{"O16",2.69},{"Mg",2.97},{"Si",2.97},{"Fe",3.36}};
(*FULL LIST OF ELEMENTS*)
atomscut={"H1","He4","He3","C12","C13","N14","N15","O16","O17","O18","Ne","Na","Mg","Al","Si","P","S","Cl","Ar","K","Ca","Sc","Ti","V","Cr","Mn","Fe","Co","Ni"};

(*My list of elements*)
atomscut={"H1","He4","C12","N14","O16","Ne","Na","Mg","Al","Si","P","S","Cl","Ar","K","Ca","Sc","Ti","V","Cr","Mn","Fe","Co","Ni"};


(*Full list of elements: {Name, atomic weight in a.u., number of protons}*)
mNuF={{"H1",1.007825,1},{"He4",4.002603,2},{"He3",3.0160293,2},{"C12",12.,6},{"C13",13.00335483521,6},{"N14",14.00307400446,7},{"N15",15.0001088989,7},{"O16",15.99491461960,8},{"O17",16.9991317566,8},{"O18",17.9991596128,8},{"Ne",20.1797,10},{"Na",22.98976928,11},{"Mg",24.305,12},{"Al",26.9815385,13},{"Si",28.085,14},{"P",30.973761998,15},{"S",32.06,16},{"Cl",35.45,17},{"Ar",39.948,18},{"K",39.0983,19},{"Ca",40.078,20},{"Sc",44.955908,21},{"Ti",47.867,22},{"V",50.9415,23},{"Cr",51.9961,24},{"Mn",54.938043,25},{"Fe",55.845,26},{"Co",58.933194,27},{"Ni",58.6934,28}};
(*element mass functions: {Name, mass [r (m)] (kg) *)
elemfF={};
Do[
elemfF=Append[elemfF,Interpolation[Table[{SSM[[i,2]]*SR,SSM[[i,j]]},{i,2,Length[SSM]}]]],{j,7,Length[SSM[[1]]]}];
(*ndfF is number density function {Name, density [r (m)] (m^-3)}*)
ndfF={};
Do[
ndfF=Append[ndfF,{SSM[[1,j]],Interpolation[Table[{SSM[[i,2]]*SR,(SSM[[i,j]](*mass fraction*)*SSM[[i,4]]*0.001*(100^3)(*density (kg/m^3)*))/(mNuF[[j-6,2]]*1.660539 (10^-27)(*kg/u*))},{i,2,Length[SSM]}]]}],{j,7,Length[SSM[[1]]]}];
fiF={};
Do[
fiF=Append[fiF,{SSM[[1,j]],NIntegrate[4\[Pi] r^2 ndfF[[j-6,2]][r],{r,0,SR},WorkingPrecision-> 7]/tn}],{j,7,Length[SSM[[1]]]}];


(*an is atomic number of nuclei = mass in au*)
An={};
Do[If[MemberQ[atomscut,mNuF[[i,1]]],An=Append[An,mNuF[[i,2]]]],{i,1,Length[mNuF]}];
(*mn is mass of nuclei in GeV*)
mn={};
Do[If[MemberQ[atomscut,mNuF[[i,1]]],mn=Append[mn,mNuF[[i,2]]*0.9314941(*GeV/au*)]],{i,1,Length[mNuF]}];
(*zn is number of protons in each atom*)
zn={};
Do[If[MemberQ[atomscut,mNuF[[i,1]]],zn=Append[zn,mNuF[[i,3]]]],{i,1,Length[mNuF]}];
(*ndf is number density function [r (m)], m^-3*)
ndf={};
Do[If[MemberQ[atomscut,ndfF[[i,1]]],ndf=Append[ndf,ndfF[[i,2]]]],{i,1,Length[mNuF]}];
fi={};
Do[If[MemberQ[atomscut,fiF[[i,1]]],fi=Append[fi,fiF[[i,2]]]],{i,1,Length[mNuF]}];

(*Table[{atomscut\[LeftDoubleBracket]i\[RightDoubleBracket],Log10[NIntegrate[4\[Pi] r^2ndf\[LeftDoubleBracket]i\[RightDoubleBracket][r],{r,0,SR}]/(tn*0.92)]+12},{i,1,Length[ndf]}]*)


(* ::Input::Initialization:: *)
microrun[aDM_,MDVB_,MXd_,gSM_]:=(
$micropath="/home/isanderson/src/physics/micromegas_5.0.8/SMDP";
$microout="microout";
$paramsfile="paramsfile.par";
SetDirectory[$micropath];
params={{"aDM",aDM},{"MDVB",MDVB},{"MXd",MXd},{"gSM",gSM}};
Export[$paramsfile,params,"Table"];
Run["./main "<>$paramsfile<>" > "<>$microout];
str=OpenRead[$microout];
capline = Find[str,"Capture Rate is"];
capstring=StringTake[capline,-13];
capstring=StringReplace[capstring,"E+"-> "*10^"];
capstring=StringReplace[capstring,"E-"-> "*10^-"];
caprate=ToExpression[capstring];

crosspbline=Find[str,"proton  SI"];
crosspbstring=StringTake[crosspbline,{13,21}];
crosspbstring=StringReplace[crosspbstring,"E+"-> "*10^"];
crosspbstring=StringReplace[crosspbstring,"E-"-> "*10^-"];
crosspb=ToExpression[crosspbstring];
crossm2=crosspb*10^-36(*pb to cm^2*)*10^-4(*cm^2to m^2*);
Close[str];
SetDirectory[NotebookDirectory[]];
{crossm2,caprate})
inMXd=10000.;
inaDM=0.024/1000 inMXd;
inMDVB=0.05;
ingSM=10^-8.;
(*microrun[inaDM,inMDVB,inMXd,ingSM]*)


(* ::Input::Initialization:: *)
SetDirectory[NotebookDirectory[]];
nevents=10000;
minMDM=500.(*minimum DM mass to scan over in GeV*);
maxMDM=10.^6(*Maximum DM mass for scan in GeV*);
MDMpoints=5(*How many points along MDM to scan*);
DPmass=5.(*Dark Photon mass in GeV*);
(*specpoints=30.(*How many points along the boosted spectrum to generate*);*)

aucm=1.49598 10^11 *100;(*distance from earth to sun in cm*)
hawcbins={{0.5,1.6,2.2 10^-12},{1.6,5.0,8.8 10^-13},{5.0,15.7,2.8 10^-13},{15.7,50,8.1 10^-14},{50,158,6.3 10^-14}};(*Start of bin (left edge) and flux limit in TeV and TeV cm^2s^-1 respectively*)

(*These are parameters to be used in the MG5 scan -- they mostly don't matter for the model independent case*)
MG\[Epsilon]=1.;(*Mixing parameter between photon and dark photon -- doesn't really matter for the model independent scan here*)
MG\[Alpha]\[Chi]=2.4 10^-2;(*Dark fine structure constant -- also doesn't matter here*)
MGm\[Chi]=DPmass;(*DM mass -- only need it big enough to avoid the DP decaying into them*)

(*fixedform is what makes the numbers nice to print to a file*)
StringPadLeft["",1];(*this must be evaluated first for no evident reason*)fixedform[numd_,data_]:=Module[{ef},ef[s_String/;StringTake[s,1]=="-"]:="-"<>StringPadLeft[StringTake[s,{2,-1}],2,"0"];
ef[s_String]:="+"<>StringPadLeft[s,2,"0"];
NumberForm[data,{numd,numd},ExponentFunction->(#&),NumberSigns->{"-"," "},NumberFormat:>(Row[{StringPadRight[#1,numd+2,"0"],"E",ef[#3]}]&)]]
$mg5outputfile = "dvb";
$inputfile="anninput";
$mg5runfile="mg5run";
$pythiaoutputfile="pythiaoutput";
$pythonoutputfile="pythonoutput";
$resultsfile="spec"<>ToString[$KernelID];
$debugfile = "debug"<>$mg5outputfile;
talpha="thermal";
(*au=1.49598 10^11 *100;(*distance from earth to sun in cm*)
aum=1.49598 10^11 ;(*distance from earth to sun in m*)
SR=6.957 10^8;(*Solar radius in m*)*)
If[FileExistsQ[$debugfile],DeleteFile[$debugfile]];


(* ::Input::Initialization:: *)
If[FileExistsQ["pythia8_card_"<>$mg5outputfile<>".dat"],DeleteFile["pythia8_card_"<>$mg5outputfile<>".dat"]];
CopyFile["pythia8_card_default.dat","pythia8_card_"<>$mg5outputfile<>".dat"];
pythiacard=OpenAppend["pythia8_card_"<>$mg5outputfile<>".dat",PageWidth-> 500];
WriteString[pythiacard,"ResonanceWidths:minWidth = 1e-30"];
WriteString[pythiacard,"\n"<>"Check:event = off"];
(*WriteString[pythiacard,"\n"<>"50:onMode = on"];*)
(*WriteString[pythiacard,"\n"<>"100001:offIfMatch = 1 1"];*)

(*WriteString[pythiacard,"\n"<>"100001:oneChannel = onMode 1. 0. 11 -11"];*)

(*WriteString[pythiacard,"\n"<>"ParticleDecays:allowPhotonRadiation = on"];*)
(*This enables particles with very small widths to still decay by avoiding their width being set to zero for being below the default min of 1e-20*)
(*WriteString[pythiacard,"\n"<>"ParticleDecays:limitTau0 = off"];
WriteString[pythiacard,"\n"<>"ParticleDecays:limitTau = off"];
WriteString[pythiacard,"\n"<>"ParticleDecays:limitRadius = off"];
WriteString[pythiacard,"\n"<>"ParticleDecays:limitCylinder = off"];
WriteString[pythiacard,"\n"<>"ParticleDecays:mSafety = 0."];*)
Close[pythiacard];


(* ::Input::Initialization:: *)
(*This sets up the scan to annihilate electron/positron into dark photons AT REST*)
ScanMadgraph[]:=(
If[FileExistsQ[$mg5runfile],DeleteFile[$mg5runfile]];
If[DirectoryQ[$mg5outputfile],DeleteDirectory[$mg5outputfile,DeleteContents->True]];
mg5run={"import model ./SMDP_UFO/",
 "set automatic_html_opening False",
 "generate e+ e- > dvb dvb",
"output " <> $mg5outputfile,
"launch "<>$mg5outputfile,
"shower = Pythia8",
"set nevents "<>ToString[nevents],
"set WDVB Auto",
"set ptj 0.0",
"set pta 0.0",
"set ptl 0.0",
(*"set drll 0.0",
"set drjj 0.0",
"set draj 0.0",
"set drjl 0.0",
"set dral 0.0",
"set draa 0.0",
"set r0gamma 0.01",*)
"set etaj -1.0",
"set etaa -1.0",
"set etal -1.0",
"./pythia8_card_"<>$mg5outputfile<>".dat",
"set mxd "<>ToString[fixedform[6,MGm\[Chi]]],
"set gsm "<>ToString[fixedform[6,MG\[Epsilon]]],
"set adm "<>ToString[fixedform[6,MG\[Alpha]\[Chi]]],
"set mdvb "<>ToString[fixedform[6,DPmass]],
"set ebeam1 "<>ToString[fixedform[6,DPmass*1.00001]],(*Need to have .00001 extra to avoid computational issues*)
"set ebeam2 "<>ToString[fixedform[6,DPmass*1.00001]],
"set WDVB Auto"};
Export[$mg5runfile,mg5run,"text"];
Run["mg5_aMC "<>$mg5runfile];)


(* ::Input::Initialization:: *)
pythiaread[]:=
(fn=FileNames[All,$mg5outputfile<>"/Events"];
If[FileExistsQ[$pythiaoutputfile],DeleteFile[$pythiaoutputfile]];
Run["gzip -d < "<>fn<>"/tag_1_pythia8_events.hepmc.gz > ./"<>$pythiaoutputfile];
If[FileExistsQ[$pythonoutputfile],DeleteFile[$pythonoutputfile]];
Run["python readspec.py "<>$pythiaoutputfile<>" "<>$pythonoutputfile];
photonErest=Flatten[Import[$pythonoutputfile,"TSV"]];)


(* ::Input::Initialization:: *)
(*RUN MG5 AND PYTHIA TO GET SPECTRUM*)
ScanMadgraph[];


(* ::Input::Initialization:: *)
pythiaread[];


(* ::Input::Initialization:: *)
(*BOOSTING*)
dNdx1[E1_,m\[Chi]_,mA_]:=((*E1 will be the energy in the boosted frame, i.e. the galactic frame. See 1503.01773 pg. 16*)
x1=E1/m\[Chi];(*No 2 here as we are boosting, but not decaying into two products*)
\[Epsilon]1=2 mA/m\[Chi];
t1max=Min[1,(2x1)/\[Epsilon]1^2 (1+Sqrt[1-\[Epsilon]1^2])];
t1min=(2x1)/\[Epsilon]1^2 (1-Sqrt[1-\[Epsilon]1^2]);
tabint=Select[photonErest,mA/2 t1max>#>mA/2 t1min&];
tabint=1/nevents Table[1/(2tabint[[i]]/mA),{i,1,Length[tabint]}];
Sum[tabint[[i]],{i,1,Length[tabint]}]
)


(* ::Input::Initialization:: *)
(*Now build a table of boosted points along the spectrum*)
(*spectab=Table[{10^lEn,(10^lEn)^2dNdx1[10^lEn,100.,5. 10^-3]},{lEn,Log10[0.5],Log10[100.],(Log10[100.]-Log10[0.5])/(specpoints-1)}]*)
hawcbins={{0.5,1.6,2.2 10^-12},{1.6,5.0,8.8 10^-13},{5.0,15.7,2.8 10^-13},{15.7,50.,8.1 10^-14},{50.,158.,6.3 10^-14}};
ben=Table[i,{i,1,Length[hawcbins]}](*Just initializing a table to be overwritten*);
Do[ben[[i]]={hawcbins[[i,1]],10^((Log10[hawcbins[[i,1]]]+Log10[hawcbins[[i,2]]])/2),hawcbins[[i,2]]},{i,1,Length[hawcbins]}](*Creates a table "ben" of all the energies to be sampled on the spectrum in TeV*)
ben=ben//Flatten;
ben=DeleteDuplicates[ben];

spectab[m\[Chi]_,mA_]:=Table[{ben[[i]],ben[[i]]^2 dNdx1[ben[[i]],m\[Chi],mA]},{i,1,Length[ben]}];(*This gives the boosted spectrum E^2 dN/dE in the galactic rest frame,per annihilation*)


(* ::Input::Initialization:: *)
(*BUILD BOOSTED SPECTRUM SCAN ALONG MDM -- EVERYTHING IN TEV FROM HERE*)
If[FileExistsQ[$resultsfile],DeleteFile[$resultsfile]];
mdm=Table[0.001*10^lm\[Chi],{lm\[Chi],Log10[minMDM],Log10[maxMDM],(Log10[maxMDM]-Log10[minMDM])/(MDMpoints-1)}](*Generates a table of DM masses in TeV distributed uniformly in log space to be scanned over*);
Do[
outlist={mdm[[i]],0.001*DPmass,spectab[mdm[[i]],0.001*DPmass]};
results=OpenAppend[$resultsfile,PageWidth-> 500];
Write[results,outlist];
Close[results];
,{i,1,MDMpoints}]



(* ::Input::Initialization:: *)
If[build==1,
Mtab=Table[{SSM[[i,2]]*SR,SSM[[i,1]]*SM},{i,2,Length[SSM]}];
Mi=Interpolation[Mtab,InterpolationOrder->1];
vetab= Table[{r,\[Sqrt](-2(NIntegrate[(Gconst Mi[rp])/rp^2,{rp,SR,r}]-(Gconst Mi[SR])/SR))},{r,SR/100,SR,SR/100}];
vetab=Prepend[vetab,{0.0001,\[Sqrt](-2(NIntegrate[(Gconst Mi[rp])/rp^2,{rp,SR,0.001}]-(Gconst Mi[SR])/SR))}];
Export["data/Escape.csv",vetab,"CSV"];]


(* ::Input::Initialization:: *)
If[build==1,
fnonorm[u_]:=(*norm*) (Exp[(vgal^2-u^2)/(k u0^2)]-1)^k HeavisideTheta[vgal-u];
(*normconstant=1/NIntegrate[fnonorm[Sqrt[x^2+y^2+z^2]],{x,0,vgal},{y,0,vgal},{z,0,vgal}]*)
normconstant=1/NIntegrate[4\[Pi] u^2 fnonorm[u],{u,0,vgal}];

f[u_]:=normconstant (Exp[(vgal^2-u^2)/(k u0^2)]-1)^k HeavisideTheta[vgal-u];
usolve=Solve[u^2+uS^2+2u uS c==vgal^2,u][[2]];
upint=u/.usolve/.{c->-1};
Export["data/upint.csv",upint,"CSV"];
fS[u_] := 1/2 NIntegrate[f[Sqrt[u^2+uS^2+2u uS c]],{c,-1,1}];
ftab=Table[{u,f[u]},{u,0.,upint,upint/1000}];
Export["data/f.csv",ftab,"CSV"];
fStab=Table[{u,fS[u]},{u,0.,upint,upint/1000}];
Export["data/fS.csv",fStab,"CSV"];]


(* ::Input::Initialization:: *)
vetab=Import["data/Escape.csv"]//ToExpression;
vei=Interpolation[vetab,InterpolationOrder->1];
fStab=Import["data/fS.csv"]//ToExpression;
fSi=Interpolation[fStab];
fnonorm[u_]:=(*norm*) (Exp[(vgal^2-u^2)/(k u0^2)]-1)^k HeavisideTheta[vgal-u];
normconstant=1/NIntegrate[4\[Pi] u^2 fnonorm[u],{u,0,vgal}];

f[u_]:=normconstant (Exp[(vgal^2-u^2)/(k u0^2)]-1)^k HeavisideTheta[vgal-u];
usolve=Solve[u^2+uS^2+2u uS c==vgal^2,u][[2]];
upint=u/.usolve/.{c->-1};
EN[i_]:=0.114/An[[i]]^(5/3);
Emin[m\[Chi]_,u_,r_]:=1/2 m\[Chi] u^2 1/c^2/.{c-> 3 10^8};
Emax[i_,m\[Chi]_,u_,r_]:=2 (m\[Chi]^2 mn[[i]])/(mn[[i]]+m\[Chi])^2 (u^2+vei[r]^2) 1/c^2/.{c-> 3 10^8};
xN[i_,ER_,mA_]:=(2mn[[i]] ER + mA^2)/(2mn[[i]] EN[i]);
expintegrand[i_,m\[Chi]_,mA_,u_,r_]:=(xNmax=xN[i,Emax[i,m\[Chi],u,r],mA];
xNmin=xN[i,Emin[m\[Chi],u,r],mA];
Exp[-xNmin]/xNmin+ExpIntegralEi[-xNmin]-Exp[-xNmax]/xNmax-ExpIntegralEi[-xNmax]);
uintegrand[u_]:=u fSi[u];
rintegrand[i_,r_]:=r^2 ndf[[i]][r];
cNcap[i_,m\[Chi]_,mA_]:=NIntegrate[rintegrand[i,r]uintegrand[u]expintegrand[i,m\[Chi],mA,u,r]HeavisideTheta[xN[i,Emax[i,m\[Chi],u,r],mA]-xN[i,Emin[m\[Chi],u,r],mA]],{r,0,SR},{u,0,upint},WorkingPrecision->5,MinRecursion->2,AccuracyGoal->4,Method->{Automatic,"SymbolicProcessing"->0}];
Ccap[m\[Chi]_,mA_,\[Epsilon]_,\[Alpha]\[Chi]_]:=32\[Pi]^3 \[Epsilon]^2 \[Alpha]\[Chi] \[Alpha] n\[Chi] Sum[zn[[i]]^2/(mn[[i]]EN[i]) Exp[mA^2/(2mn[[i]]EN[i])]cNcap[i,m\[Chi],mA],{i,1,Length[atomscut]}]\[HBar]^2 c^4/.{\[HBar]-> 6.582119 10^-22 0.001 }/.{c-> 2.99792458 10^8 }/.{\[Alpha]-> 1/137.,n\[Chi]-> \[Rho]\[Chi]/m\[Chi]};
\[Sigma]annvBorn[m\[Chi]_,mA_,\[Alpha]\[Chi]_]:=(\[Pi] \[Alpha]\[Chi]^2)/m\[Chi]^2 (1-mA^2/m\[Chi]^2)^(3/2)/(1-mA^2/(2m\[Chi]^2))^2;
Som[a_,c_]:= \[Pi]/a Sinh[2\[Pi] a c]/(Cosh[2\[Pi] a c]-Cos[2 \[Pi] Sqrt[c-a^2 c^2]]);

Somav[m\[Chi]_,mA_,\[Alpha]\[Chi]_]:=(v0=5.1 10^-5 Sqrt[1000/m\[Chi]];
NIntegrate[(4\[Pi] v^2)/(2\[Pi] v0^2)^(3/2) Exp[-(1/2)v^2/v0^2]Som[v/(2\[Alpha]\[Chi]),(6\[Alpha]\[Chi] m\[Chi])/(\[Pi]^2 mA)],{v,0,10v0},Method->{Automatic,"SymbolicProcessing"->0}])
Cann[m\[Chi]_,mA_,\[Alpha]\[Chi]_]:=Somav[m\[Chi],mA,\[Alpha]\[Chi]]\[Sigma]annvBorn[m\[Chi],mA,\[Alpha]\[Chi]](*1/GeV^2*)((GN m\[Chi] (*GeV*) \[Rho]S)/(3TS kB))^(3/2) \[HBar]^2/.{GN-> 6.67 10^-11(*m^3/(kg s^2)*),\[Rho]S-> 0.151  100^3(*kg/m^3*),TS-> 15.5 10^6(*kelvin*),kB-> 8.617333 10^-5 10^-9(*GeV kelvin^-1*)}/.{c-> 2.99792458 10^8(* m/s*)}/.{\[HBar]-> 6.582119 10^-22 0.001 (*GeV s*)}
\[Tau][m\[Chi]_,mA_,\[Epsilon]_,\[Alpha]\[Chi]_]:=1/Sqrt[Ccap[m\[Chi],mA,\[Epsilon],\[Alpha]\[Chi]]Cann[m\[Chi],mA,\[Alpha]\[Chi]]];
\[Tau]S=4.5 10^9 yr/.{yr->365 day}/.{day-> 24h}/.{h-> 3600};
\[Tau]ratio[m\[Chi]_,mA_,\[Epsilon]_,\[Alpha]\[Chi]_]:=\[Tau][m\[Chi],mA,\[Epsilon],\[Alpha]\[Chi]]/\[Tau]S

(*SIMPLIFIED MODEL BEGIN*)
(*From 1312.6408*)
Simp\[Sigma]i[m\[Chi]_,i_,\[Sigma]SI_,\[Sigma]SD_,mi_,A_,Z_]:=If[i==1,\[Sigma]SI+\[Sigma]SD,(mi^2 (mp+m\[Chi])^2 A^2 \[Sigma]SI)/(mp^2 (mi+m\[Chi])^2)(*((A^2)\[Sigma]SI ((mi/mp)^2)((mp+m\[Chi])^2) )/(mi+m\[Chi])^2*)(*+(((A^2)\[Sigma]SD ((mp+m\[Chi])^2) )/(mi+m\[Chi])^2)*)](*m^2*);
Simprintegrand[r_,i_]:=4\[Pi] r^2 ndf[[i]][r];
Simpuintegrand[r_,u_]:=4\[Pi] u(u^2+vei[r]^2)fSi[u];
\[CapitalDelta]max[r_,u_,m\[Chi]_,mi_]:=(4 mi m\[Chi])/(m\[Chi] + mi)^2;
\[CapitalDelta]min[r_,u_,m\[Chi]_,mi_]:=u^2/(u^2+vei[r]^2);
Pri[r_,u_,m\[Chi]_,mi_]:=Max[0,(\[CapitalDelta]max[r,u,m\[Chi],mi]-\[CapitalDelta]min[r,u,m\[Chi],mi])/\[CapitalDelta]max[r,u,m\[Chi],mi]];
upintHS[m\[Chi]_,mNu_]:=((0.` +8.439776214093713`*^6 ) Sqrt[m\[Chi]] Sqrt[mNu])/((m\[Chi]+mNu) Sqrt[9.`- (36.` m\[Chi] mNu)/(m\[Chi]+mNu)^2]);
SimpcNcap[m\[Chi]_,i_,\[Sigma]SI_,\[Sigma]SD_]:=n\[Chi] Block[ {mNt,ZNt,ANt,ENt},
mNt=mn[[i]];
ZNt=zn[[i]];
ANt=An[[i]];
ENt=EN[i];
Simp\[Sigma]i[m\[Chi],i,\[Sigma]SI,\[Sigma]SD,mNt,ANt,ZNt] NIntegrate[
Simprintegrand[r,i]Simpuintegrand[r,u]Pri[r,u,m\[Chi],mNt],
{r,0,SR},{u,0,vgal(*0.5(*upint*)upintHS[m\[Chi],mNt]*)},WorkingPrecision->4,Method-> {Automatic,"SymbolicProcessing"->0}]]/.{n\[Chi]-> \[Rho]\[Chi]/m\[Chi]};
SimpCcap[m\[Chi]_,\[Sigma]SI_,\[Sigma]SD_]:=Sum[SimpcNcap[m\[Chi],i,\[Sigma]SI,\[Sigma]SD],{i,1,Length[atomscut]}];
(*SIMPLIFIED MODEL END*)



(*Results from 1305.1817, valid for 0.1-10GeV m\[Chi]*)
CGB[m\[Chi]_,\[Sigma]SI_,\[Sigma]SD_]:=3.57 Exp[1.34(Log[20./m\[Chi] (*GeV*)])^0.86]((\[Sigma]SD(*m^2*) (100^2)(*cm^2/m^2*))/(10^-40)(*cm^2*)) 10^23+5.27 Exp[3.73 10^-2 (Log[20./m\[Chi] (*GeV*)])^2.23]((\[Sigma]SI(*m^2*) (100^2)(*cm^2/m^2*))/(10^-40)(*cm^2*))1 10^25;



(*Results from 1104.0679*)
SKvS=220 10^3(*velocity of sun, m/s*);
SKuintegrand[u_]:=c^2/(Sqrt[\[Pi]] SKvS^2) (Exp[-(u-SKvS)^2/SKvS^2]-Exp[-(u+SKvS)^2/SKvS^2])/.{c-> 2.99792458 10^8 (*m/s*)}
SKFER2[i_,SKER_]:=Exp[-SKER(* GeV*)/SKEi]/.{SKEi-> (3 \[HBar]^2 c^2)/(2mn[[i]](*GeV*) SKRi^2)}/.{SKRi-> (0.9An[[i]]^(1/3)+0.3)10^-15(*m*)}/.{\[HBar]-> 6.582119 10^-22 0.001 (*GeV s*)}/.{c-> 2.99792458 10^8(* m/s*)}
SKERmin[m\[Chi]_,u_]:=1/2 m\[Chi] u^2/c^2/.{c-> 2.99792458 10^8 (*m/s*)}
SKERmax[i_,m\[Chi]_,u_,r_?NumericQ]:=(2\[Mu]i^2)/mn[[i]] (u^2+vei[r]^2)/c^2/.{\[Mu]i-> (m\[Chi] mn[[i]])/(m\[Chi]+mn[[i]])}/.{c-> 2.99792458 10^8 (*m/s*)}
SKdCidV[i_,m\[Chi]_,\[Sigma]i_,r_?NumericQ]:=(\[Rho]\[Chi] mn[[i]]ndf[[i]][r])/(2m\[Chi] \[Mu]i^2) \[Sigma]i NIntegrate[If[SKERmax[i,m\[Chi],u,r]-SKERmin[m\[Chi],u]>0,SKuintegrand[u]SKFER2[i,SKER],0],{u,0,vgal},{SKER,SKERmin[m\[Chi],u],SKERmax[i,m\[Chi],u,r]},WorkingPrecision-> 3,Method-> {Automatic,"SymbolicProcessing"->0}]/.{\[Mu]i-> (m\[Chi] mn[[i]])/(m\[Chi]+mn[[i]])}

GeV/m^3 GeV 1/m^3 1/GeV 1/GeV^2 m^2 m/s GeV
SKCS[m\[Chi]_,\[Sigma]p_]:=Sum[NIntegrate[4\[Pi] r^2 SKdCidV[i,m\[Chi],\[Sigma]p zn[[i]]^2 ((m\[Chi] mn[[i]])/(m\[Chi]+mn[[i]]))^2 ((m\[Chi]+mp)/(m\[Chi] mp))^2,r],{r,0,SR},WorkingPrecision->3,Method-> {Automatic,"SymbolicProcessing"->0}],{i,1,Length[mn]}]
m^2 1/(m^3 s) m

ti=1;
tm\[Chi]=100000;
tmA=5.;
t\[Epsilon]= 10.^-8;
t\[Alpha]\[Chi]=0.024/1000 tm\[Chi];
tu=0.1vgal;
tr=0.5SR;
t\[Sigma]=10^-44(*m^2*);


microrun[t\[Alpha]\[Chi],tmA,tm\[Chi],t\[Epsilon]]
t\[Sigma]=%[[1]]
(*SKdCidV[ti,tm\[Chi],10^-40,tr]
*)AbsoluteTiming[SKCS[tm\[Chi],t\[Sigma]]]
(*CGB[tm\[Chi],t\[Sigma],0]
SimpCcap[tm\[Chi],t\[Sigma],0.]*)




